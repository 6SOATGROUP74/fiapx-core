version: '3.9'

services:
  #  tech-challenge:
  #    build:
  #      context: .
  #      dockerfile: Dockerfile
  #    image: igoryy/fiap-6soat:latest
  #    container_name: springboot-lanchonete
  #    restart: on-failure
  #    environment:
  #      - DB_HOST
  #      - DB_PORT
  #      - DB_USER
  #      - DB_PASSWORD
  #    ports:
  #      - "8080:8080"
  #    depends_on:
  #      mysql:
  #        condition: service_healthy
  #    networks:
  #      - tech-challenge-network

  mysql:
    image: mysql:8.0.37-debian
    container_name: mysql-pagamento
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: user_main
      MYSQL_DATABASE: db_soat_pagamento
      MYSQL_USER: user_main
      MYSQL_PASSWORD: user_main
    volumes:
      - mysql-volume-pagamento:/var/lib/mysql
    #    healthcheck:
    #      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    #      timeout: 1s
    #      retries: 10
    networks:
      - tech-challenge-network

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566"  # Porta principal do LocalStack
    environment:
      - SERVICES=s3,sqs,dynamodb  # Habilita os serviços desejados
      - DEBUG=1  # Habilita logs detalhados
      #- DATA_DIR=/tmp/localstack/data  # Persiste os dados entre reinicializações
      - AWS_DEFAULT_REGION=us-east-1  # Região padrão da AWS
      - AWS_ACCESS_KEY_ID=test  # Credenciais fake (não usadas no LocalStack)
      - AWS_SECRET_ACCESS_KEY=test
    volumes:
      #- localstack-data:/tmp/localstack  # Volume persistente
      - /var/run/docker.sock:/var/run/docker.sock  # Permite LocalStack criar contêineres internos

networks:
  tech-challenge-network:
    driver: bridge

volumes:
  mysql-volume-pagamento:
    driver: local
  localstack-data:
